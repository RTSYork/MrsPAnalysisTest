# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cansim', [dirname(__file__)])
        except ImportError:
            import _cansim
            return _cansim
        if fp is not None:
            try:
                _mod = imp.load_module('_cansim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cansim = swig_import_helper()
    del swig_import_helper
else:
    import _cansim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Task, name)
    __repr__ = _swig_repr
    def init(self, *args): return _cansim.Task_init(self, *args)
    def __init__(self, wcet=0, period=0, deadline=0, prio_pt=0, susp=0, max_tardiness=0): 
        this = _cansim.new_Task(wcet, period, deadline, prio_pt, susp, max_tardiness)
        try: self.this.append(this)
        except: self.this = this
    def get_period(self): return _cansim.Task_get_period(self)
    def get_wcet(self): return _cansim.Task_get_wcet(self)
    def get_deadline(self): return _cansim.Task_get_deadline(self)
    def get_prio_pt(self): return _cansim.Task_get_prio_pt(self)
    def get_self_suspension(self): return _cansim.Task_get_self_suspension(self)
    def get_tardiness_threshold(self): return _cansim.Task_get_tardiness_threshold(self)
    def has_implicit_deadline(self): return _cansim.Task_has_implicit_deadline(self)
    def has_constrained_deadline(self): return _cansim.Task_has_constrained_deadline(self)
    def is_feasible(self): return _cansim.Task_is_feasible(self)
    def is_self_suspending(self): return _cansim.Task_is_self_suspending(self)
    def bound_demand(self, *args): return _cansim.Task_bound_demand(self, *args)
    def dbf(self, *args): return _cansim.Task_dbf(self, *args)
    def approx_load(self, *args): return _cansim.Task_approx_load(self, *args)
    __swig_destroy__ = _cansim.delete_Task
    __del__ = lambda self : None;
Task_swigregister = _cansim.Task_swigregister
Task_swigregister(Task)

class TaskSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cansim.new_TaskSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cansim.delete_TaskSet
    __del__ = lambda self : None;
    def add_task(self, *args): return _cansim.TaskSet_add_task(self, *args)
    def get_task_count(self): return _cansim.TaskSet_get_task_count(self)
    def has_only_implicit_deadlines(self): return _cansim.TaskSet_has_only_implicit_deadlines(self)
    def has_only_constrained_deadlines(self): return _cansim.TaskSet_has_only_constrained_deadlines(self)
    def has_only_feasible_tasks(self): return _cansim.TaskSet_has_only_feasible_tasks(self)
    def has_no_self_suspending_tasks(self): return _cansim.TaskSet_has_no_self_suspending_tasks(self)
    def is_not_overutilized(self, *args): return _cansim.TaskSet_is_not_overutilized(self, *args)
    def bound_demand(self, *args): return _cansim.TaskSet_bound_demand(self, *args)
    def get_period(self, *args): return _cansim.TaskSet_get_period(self, *args)
    def get_wcet(self, *args): return _cansim.TaskSet_get_wcet(self, *args)
    def get_deadline(self, *args): return _cansim.TaskSet_get_deadline(self, *args)
TaskSet_swigregister = _cansim.TaskSet_swigregister
TaskSet_swigregister(TaskSet)

class CANTask(Task):
    __swig_setmethods__ = {}
    for _s in [Task]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CANTask, name, value)
    __swig_getmethods__ = {}
    for _s in [Task]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CANTask, name)
    __repr__ = _swig_repr
    def init(self, priority=0, taskid=0): return _cansim.CANTask_init(self, priority, taskid)
    def __init__(self, wcet=0, period=0, deadline=0, priority=0, taskid=0): 
        this = _cansim.new_CANTask(wcet, period, deadline, priority, taskid)
        try: self.this.append(this)
        except: self.this = this
    def get_priority(self): return _cansim.CANTask_get_priority(self)
    def get_taskid(self): return _cansim.CANTask_get_taskid(self)
    def is_critical(self): return _cansim.CANTask_is_critical(self)
    def set_priority(self, *args): return _cansim.CANTask_set_priority(self, *args)
    def set_taskid(self, *args): return _cansim.CANTask_set_taskid(self, *args)
    def set_critical(self): return _cansim.CANTask_set_critical(self)
    __swig_destroy__ = _cansim.delete_CANTask
    __del__ = lambda self : None;
CANTask_swigregister = _cansim.CANTask_swigregister
CANTask_swigregister(CANTask)

class CANTaskSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CANTaskSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CANTaskSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cansim.new_CANTaskSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cansim.delete_CANTaskSet
    __del__ = lambda self : None;
    def add_task(self, *args): return _cansim.CANTaskSet_add_task(self, *args)
    def add_canbus_task(self, *args): return _cansim.CANTaskSet_add_canbus_task(self, *args)
    def add_retransmission(self, *args): return _cansim.CANTaskSet_add_retransmission(self, *args)
    def add_omission(self, *args): return _cansim.CANTaskSet_add_omission(self, *args)
    def add_commission(self, *args): return _cansim.CANTaskSet_add_commission(self, *args)
    def mark_critical_tasks(self, *args): return _cansim.CANTaskSet_mark_critical_tasks(self, *args)
    def add_fault_params(self, *args): return _cansim.CANTaskSet_add_fault_params(self, *args)
    def get_busrate(self): return _cansim.CANTaskSet_get_busrate(self)
    def set_busrate(self, *args): return _cansim.CANTaskSet_set_busrate(self, *args)
    def get_rprime(self): return _cansim.CANTaskSet_get_rprime(self)
    def set_rprime(self, *args): return _cansim.CANTaskSet_set_rprime(self, *args)
    def get_replication_factor(self): return _cansim.CANTaskSet_get_replication_factor(self)
    def get_task_count(self): return _cansim.CANTaskSet_get_task_count(self)
    def get_retransmissions(self): return _cansim.CANTaskSet_get_retransmissions(self)
    def get_omissions(self): return _cansim.CANTaskSet_get_omissions(self)
    def get_commissions(self): return _cansim.CANTaskSet_get_commissions(self)
    def get_prob_omissions(self): return _cansim.CANTaskSet_get_prob_omissions(self)
    def get_prob_commissions(self): return _cansim.CANTaskSet_get_prob_commissions(self)
    def get_retransmission_rate(self): return _cansim.CANTaskSet_get_retransmission_rate(self)
    def get_host_fault_rate(self): return _cansim.CANTaskSet_get_host_fault_rate(self)
    def get_num_distinct_taskids(self): return _cansim.CANTaskSet_get_num_distinct_taskids(self)
    def get_num_ok_rounds(self): return _cansim.CANTaskSet_get_num_ok_rounds(self)
    def get_num_faulty_rounds(self): return _cansim.CANTaskSet_get_num_faulty_rounds(self)
    def set_num_ok_rounds(self, *args): return _cansim.CANTaskSet_set_num_ok_rounds(self, *args)
    def set_num_faulty_rounds(self, *args): return _cansim.CANTaskSet_set_num_faulty_rounds(self, *args)
    def get_period(self, *args): return _cansim.CANTaskSet_get_period(self, *args)
    def get_wcet(self, *args): return _cansim.CANTaskSet_get_wcet(self, *args)
    def get_deadline(self, *args): return _cansim.CANTaskSet_get_deadline(self, *args)
    def get_period_from_taskid(self, *args): return _cansim.CANTaskSet_get_period_from_taskid(self, *args)
CANTaskSet_swigregister = _cansim.CANTaskSet_swigregister
CANTaskSet_swigregister(CANTaskSet)


def simulate_for_tardiness_stats(*args):
  return _cansim.simulate_for_tardiness_stats(*args)
simulate_for_tardiness_stats = _cansim.simulate_for_tardiness_stats

def get_job_completion_time(*args):
  return _cansim.get_job_completion_time(*args)
get_job_completion_time = _cansim.get_job_completion_time
# This file is compatible with both classic and new-style classes.


