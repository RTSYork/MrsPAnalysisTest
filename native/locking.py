# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_locking', [dirname(__file__)])
        except ImportError:
            import _locking
            return _locking
        if fp is not None:
            try:
                _mod = imp.load_module('_locking', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _locking = swig_import_helper()
    del swig_import_helper
else:
    import _locking
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


WRITE = _locking.WRITE
READ = _locking.READ
class ResourceSharingInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceSharingInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceSharingInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _locking.new_ResourceSharingInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_task(self, *args): return _locking.ResourceSharingInfo_add_task(self, *args)
    def add_request(self, *args): return _locking.ResourceSharingInfo_add_request(self, *args)
    def add_request_rw(self, *args): return _locking.ResourceSharingInfo_add_request_rw(self, *args)
    __swig_destroy__ = _locking.delete_ResourceSharingInfo
    __del__ = lambda self : None;
ResourceSharingInfo_swigregister = _locking.ResourceSharingInfo_swigregister
ResourceSharingInfo_swigregister(ResourceSharingInfo)

NO_CPU = _locking.NO_CPU
class ResourceLocality(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceLocality, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceLocality, name)
    __repr__ = _swig_repr
    def assign_resource(self, *args): return _locking.ResourceLocality_assign_resource(self, *args)
    def __init__(self): 
        this = _locking.new_ResourceLocality()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _locking.delete_ResourceLocality
    __del__ = lambda self : None;
ResourceLocality_swigregister = _locking.ResourceLocality_swigregister
ResourceLocality_swigregister(ResourceLocality)

class ReplicaInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplicaInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReplicaInfo, name)
    __repr__ = _swig_repr
    def set_replicas(self, *args): return _locking.ReplicaInfo_set_replicas(self, *args)
    def __init__(self): 
        this = _locking.new_ReplicaInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _locking.delete_ReplicaInfo
    __del__ = lambda self : None;
ReplicaInfo_swigregister = _locking.ReplicaInfo_swigregister
ReplicaInfo_swigregister(ReplicaInfo)

class BlockingBounds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockingBounds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockingBounds, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _locking.new_BlockingBounds(*args)
        try: self.this.append(this)
        except: self.this = this
    def raise_blocking_length(self, *args): return _locking.BlockingBounds_raise_blocking_length(self, *args)
    def size(self): return _locking.BlockingBounds_size(self)
    def get_blocking_term(self, *args): return _locking.BlockingBounds_get_blocking_term(self, *args)
    def get_blocking_count(self, *args): return _locking.BlockingBounds_get_blocking_count(self, *args)
    def get_span_term(self, *args): return _locking.BlockingBounds_get_span_term(self, *args)
    def get_span_count(self, *args): return _locking.BlockingBounds_get_span_count(self, *args)
    def get_raw_remote_blocking(self, *args): return _locking.BlockingBounds_get_raw_remote_blocking(self, *args)
    def get_remote_blocking(self, *args): return _locking.BlockingBounds_get_remote_blocking(self, *args)
    def get_remote_count(self, *args): return _locking.BlockingBounds_get_remote_count(self, *args)
    def set_remote_blocking(self, *args): return _locking.BlockingBounds_set_remote_blocking(self, *args)
    def get_local_blocking(self, *args): return _locking.BlockingBounds_get_local_blocking(self, *args)
    def get_local_count(self, *args): return _locking.BlockingBounds_get_local_count(self, *args)
    def set_local_blocking(self, *args): return _locking.BlockingBounds_set_local_blocking(self, *args)
    def get_arrival_blocking(self, *args): return _locking.BlockingBounds_get_arrival_blocking(self, *args)
    def set_arrival_blocking(self, *args): return _locking.BlockingBounds_set_arrival_blocking(self, *args)
    __swig_destroy__ = _locking.delete_BlockingBounds
    __del__ = lambda self : None;
BlockingBounds_swigregister = _locking.BlockingBounds_swigregister
BlockingBounds_swigregister(BlockingBounds)


def task_fair_mutex_bounds(*args):
  return _locking.task_fair_mutex_bounds(*args)
task_fair_mutex_bounds = _locking.task_fair_mutex_bounds

def task_fair_rw_bounds(*args):
  return _locking.task_fair_rw_bounds(*args)
task_fair_rw_bounds = _locking.task_fair_rw_bounds

def phase_fair_rw_bounds(*args):
  return _locking.phase_fair_rw_bounds(*args)
phase_fair_rw_bounds = _locking.phase_fair_rw_bounds

def msrp_bounds_holistic(*args):
  return _locking.msrp_bounds_holistic(*args)
msrp_bounds_holistic = _locking.msrp_bounds_holistic

def global_omlp_bounds(*args):
  return _locking.global_omlp_bounds(*args)
global_omlp_bounds = _locking.global_omlp_bounds

def global_fmlp_bounds(*args):
  return _locking.global_fmlp_bounds(*args)
global_fmlp_bounds = _locking.global_fmlp_bounds

def clustered_omlp_bounds(*args):
  return _locking.clustered_omlp_bounds(*args)
clustered_omlp_bounds = _locking.clustered_omlp_bounds

def clustered_rw_omlp_bounds(*args):
  return _locking.clustered_rw_omlp_bounds(*args)
clustered_rw_omlp_bounds = _locking.clustered_rw_omlp_bounds

def clustered_kx_omlp_bounds(*args):
  return _locking.clustered_kx_omlp_bounds(*args)
clustered_kx_omlp_bounds = _locking.clustered_kx_omlp_bounds

def part_omlp_bounds(*args):
  return _locking.part_omlp_bounds(*args)
part_omlp_bounds = _locking.part_omlp_bounds

def part_fmlp_bounds(*args):
  return _locking.part_fmlp_bounds(*args)
part_fmlp_bounds = _locking.part_fmlp_bounds

def mpcp_bounds(*args):
  return _locking.mpcp_bounds(*args)
mpcp_bounds = _locking.mpcp_bounds

def dpcp_bounds(*args):
  return _locking.dpcp_bounds(*args)
dpcp_bounds = _locking.dpcp_bounds

def msrp_bounds(*args):
  return _locking.msrp_bounds(*args)
msrp_bounds = _locking.msrp_bounds

def global_pip_bounds(*args):
  return _locking.global_pip_bounds(*args)
global_pip_bounds = _locking.global_pip_bounds

def ppcp_bounds(*args):
  return _locking.ppcp_bounds(*args)
ppcp_bounds = _locking.ppcp_bounds
# This file is compatible with both classic and new-style classes.


