# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sched', [dirname(__file__)])
        except ImportError:
            import _sched
            return _sched
        if fp is not None:
            try:
                _mod = imp.load_module('_sched', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sched = swig_import_helper()
    del swig_import_helper
else:
    import _sched
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Task, name)
    __repr__ = _swig_repr
    def init(self, *args): return _sched.Task_init(self, *args)
    def __init__(self, wcet=0, period=0, deadline=0, prio_pt=0, susp=0, max_tardiness=0): 
        this = _sched.new_Task(wcet, period, deadline, prio_pt, susp, max_tardiness)
        try: self.this.append(this)
        except: self.this = this
    def get_period(self): return _sched.Task_get_period(self)
    def get_wcet(self): return _sched.Task_get_wcet(self)
    def get_deadline(self): return _sched.Task_get_deadline(self)
    def get_prio_pt(self): return _sched.Task_get_prio_pt(self)
    def get_self_suspension(self): return _sched.Task_get_self_suspension(self)
    def get_tardiness_threshold(self): return _sched.Task_get_tardiness_threshold(self)
    def has_implicit_deadline(self): return _sched.Task_has_implicit_deadline(self)
    def has_constrained_deadline(self): return _sched.Task_has_constrained_deadline(self)
    def is_feasible(self): return _sched.Task_is_feasible(self)
    def is_self_suspending(self): return _sched.Task_is_self_suspending(self)
    def bound_demand(self, *args): return _sched.Task_bound_demand(self, *args)
    def approx_load(self, *args): return _sched.Task_approx_load(self, *args)
    __swig_destroy__ = _sched.delete_Task
    __del__ = lambda self : None;
Task_swigregister = _sched.Task_swigregister
Task_swigregister(Task)

class TaskSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_TaskSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sched.delete_TaskSet
    __del__ = lambda self : None;
    def add_task(self, *args): return _sched.TaskSet_add_task(self, *args)
    def get_task_count(self): return _sched.TaskSet_get_task_count(self)
    def has_only_implicit_deadlines(self): return _sched.TaskSet_has_only_implicit_deadlines(self)
    def has_only_constrained_deadlines(self): return _sched.TaskSet_has_only_constrained_deadlines(self)
    def has_only_feasible_tasks(self): return _sched.TaskSet_has_only_feasible_tasks(self)
    def has_no_self_suspending_tasks(self): return _sched.TaskSet_has_no_self_suspending_tasks(self)
    def is_not_overutilized(self, *args): return _sched.TaskSet_is_not_overutilized(self, *args)
    def bound_demand(self, *args): return _sched.TaskSet_bound_demand(self, *args)
    def get_period(self, *args): return _sched.TaskSet_get_period(self, *args)
    def get_wcet(self, *args): return _sched.TaskSet_get_wcet(self, *args)
    def get_deadline(self, *args): return _sched.TaskSet_get_deadline(self, *args)
TaskSet_swigregister = _sched.TaskSet_swigregister
TaskSet_swigregister(TaskSet)

class SchedulabilityTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchedulabilityTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchedulabilityTest, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def is_schedulable(self, *args): return _sched.SchedulabilityTest_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_SchedulabilityTest
    __del__ = lambda self : None;
SchedulabilityTest_swigregister = _sched.SchedulabilityTest_swigregister
SchedulabilityTest_swigregister(SchedulabilityTest)

class BakerGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BakerGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BakerGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_BakerGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.BakerGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_BakerGedf
    __del__ = lambda self : None;
BakerGedf_swigregister = _sched.BakerGedf_swigregister
BakerGedf_swigregister(BakerGedf)

class GFBGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GFBGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GFBGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_GFBGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.GFBGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_GFBGedf
    __del__ = lambda self : None;
GFBGedf_swigregister = _sched.GFBGedf_swigregister
GFBGedf_swigregister(GFBGedf)

class BaruahGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaruahGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaruahGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_BaruahGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.BaruahGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_BaruahGedf
    __del__ = lambda self : None;
BaruahGedf_swigregister = _sched.BaruahGedf_swigregister
BaruahGedf_swigregister(BaruahGedf)
cvar = _sched.cvar
BaruahGedf.MAX_RUNTIME = _sched.cvar.BaruahGedf_MAX_RUNTIME

class BCLGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BCLGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_BCLGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.BCLGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_BCLGedf
    __del__ = lambda self : None;
BCLGedf_swigregister = _sched.BCLGedf_swigregister
BCLGedf_swigregister(BCLGedf)

class BCLIterativeGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BCLIterativeGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BCLIterativeGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_BCLIterativeGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.BCLIterativeGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_BCLIterativeGedf
    __del__ = lambda self : None;
BCLIterativeGedf_swigregister = _sched.BCLIterativeGedf_swigregister
BCLIterativeGedf_swigregister(BCLIterativeGedf)

class RTAGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTAGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RTAGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_RTAGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.RTAGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_RTAGedf
    __del__ = lambda self : None;
RTAGedf_swigregister = _sched.RTAGedf_swigregister
RTAGedf_swigregister(RTAGedf)

class FFDBFGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFDBFGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFDBFGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_FFDBFGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.FFDBFGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_FFDBFGedf
    __del__ = lambda self : None;
FFDBFGedf_swigregister = _sched.FFDBFGedf_swigregister
FFDBFGedf_swigregister(FFDBFGedf)

class LoadGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoadGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_LoadGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.LoadGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_LoadGedf
    __del__ = lambda self : None;
LoadGedf_swigregister = _sched.LoadGedf_swigregister
LoadGedf_swigregister(LoadGedf)

class GlobalEDF(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalEDF, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalEDF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_GlobalEDF(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.GlobalEDF_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_GlobalEDF
    __del__ = lambda self : None;
GlobalEDF_swigregister = _sched.GlobalEDF_swigregister
GlobalEDF_swigregister(GlobalEDF)

class GELPl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GELPl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GELPl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_GELPl(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_bound(self, *args): return _sched.GELPl_get_bound(self, *args)
    def get_Si(self, *args): return _sched.GELPl_get_Si(self, *args)
    def get_Gi(self, *args): return _sched.GELPl_get_Gi(self, *args)
    __swig_destroy__ = _sched.delete_GELPl
    __del__ = lambda self : None;
GELPl_swigregister = _sched.GELPl_swigregister
GELPl_swigregister(GELPl)

class QPATest(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QPATest, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QPATest, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_QPATest(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.QPATest_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_QPATest
    __del__ = lambda self : None;
QPATest_swigregister = _sched.QPATest_swigregister
QPATest_swigregister(QPATest)

class LAGedf(SchedulabilityTest):
    __swig_setmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LAGedf, name, value)
    __swig_getmethods__ = {}
    for _s in [SchedulabilityTest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LAGedf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sched.new_LAGedf(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_schedulable(self, *args): return _sched.LAGedf_is_schedulable(self, *args)
    __swig_destroy__ = _sched.delete_LAGedf
    __del__ = lambda self : None;
LAGedf_swigregister = _sched.LAGedf_swigregister
LAGedf_swigregister(LAGedf)
LAGedf.MAX_RUNTIME = _sched.cvar.LAGedf_MAX_RUNTIME

# This file is compatible with both classic and new-style classes.


